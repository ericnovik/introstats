getwd()
library(introstats)
?hello
hello()
devtools::load_all()
require(devtools)
ls()
library("introstats", lib.loc="~/Google Drive/Statistics with R Book/introstats/packrat/lib/x86_64-apple-darwin10.8.0/3.1.2")
install.packages("devtools")
devtools::load_all()
devtools::load_all()
hello()
devtools::load_all()
hello()
library(introstats)
library(introstats)
getwd()
library(ggplot2)
?qplot
head(mtcars)
qplot(mpg, wt, data = mtcars)
qplot(mpg, wt, data=mtcars, colour=cyl)
qplot(mpg, wt, data=mtcars, colour = as.factor(cyl))
qplot(mpg, wt, data=mtcars, facets=vs ~ am)
rstudioapi::isAvailable("0.99.149")
install.packages("rstudioapi")
rstudioapi::isAvailable("0.99.149")
devtools::install_github("hadley/devtools")
packrat::snapshot(prompt = FALSE)
.libPaths()
dir
lapply(.libPaths(), dir)
devtools::load_all()
library(introstats)
hello()
library(introstats)
library(introstats)
ggplot_it <- function() {
x <- rnorm(100)
qplot(x)
}
ggplot_it()
packrat::snapshot(prompt = FALSE)
library(introstats)
ggplot_it()
install.packages("ggplot2")
rm(ggplot_it())
rm(ggplot_it
)
rm(ggplot_it)
library(introstats)
hell
hello()
ggplot_it()
ggplot_it <- function() {
x <- rnorm(100)
ggplot2::qplot(x)
}
rm(ggplot_it())
rm(ggplot_it
)
requireNamespace
?
requireNamespace
library(introstats)
library(introstats)
library(introstats)
devtools::document()
library(introstats)
detach("package:introstats", unload=TRUE)
library(introstats)
devtools::document()
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
devtools::document()
library(introstats)
detach("package:introstats", unload=TRUE)
library(introstats)
detach("package:introstats", unload=TRUE)
library("introstats", lib.loc="~/Google Drive/Statistics with R Book/introstats/packrat/lib/x86_64-apple-darwin13.4.0/3.2.0")
?devtools::use_data
x <- sample(1000)
devtools::use_data(x, mtcars)
6000/37
5400/25
5400 + 5500
install.packages("packrat")
getwd()
library(devtools)
table_1-1 <- read.csv("~/Google Drive/Statistics with R Book/prod/01-chapter/table_1-1.csv", stringsAsFactors = FALSE)
table_1_1 <- read.csv("~/Google Drive/Statistics with R Book/prod/01-chapter/table_1-1.csv", stringsAsFactors = FALSE)
table_1_4 <- read.csv("~/Google Drive/Statistics with R Book/prod/01-chapter/table_1-4.csv", stringsAsFactors = FALSE)
table_1_1
table_1_4
devtools::use_data(table_1_4, table_1_1)
library(introstats)
tv_hours <- read.csv("~/Documents/Rfiles/tvhrs.csv", stringsAsFactors = FALSE)
tv_hours
devtools::use_data(tv_hours)
library(introstats)
tv_hours
rm(tv_hours)
tv_hours
students <- read.csv("~/Documents/Rfiles/student.csv", stringsAsFactors = FALSE)
students
students <- read.csv("~/Documents/Rfiles/student.csv", stringsAsFactors = FALSE)
devtools::use_data(students)
library(introstats)
students
detach("package:introstats", unload=TRUE)
library(introstats)
students
tv_hours
detach("package:introstats", unload=TRUE)
library(introstats)
us_data <- read.csv("~/Documents/Rfiles/USdata.csv", stringsAsFactors = FALSE)
us_data
poverty <- read.csv("~/Documents/Rfiles/USdata.csv", stringsAsFactors = FALSE)
devtools::use_data(poverty)
library(introstats)
poverty
poverty
q()
update.packages(ask = FALSE)
?update.packages
installed.packages()
sessionInfo()
update.packages()
update.packages(ask = FALSE)
update.packages(ask = FALSE)
getwd()
packrat::snapshot(prompt = FALSE)
library(introstats)
require("my")
x <- require("my")
x
x <- require("curl")
detach("package:curl", unload=TRUE)
x <- require("my")
x <- suppressWarnings(require("my"))
x
x <- suppressMessages(suppressWarnings(require("my")))
x
x <- suppressMessages(suppressWarnings(require("curl")))
x
detach("package:curl", unload=TRUE)
library(introstats)
getwd()
exit <- read.csv("~/Downloads/exit.csv", stringsAsFactors = FALSE)
exit
head(exit)
str(exit)
colnames(exit) <- 'obama'
head(exit)
devtools::use_data(exit)
library(introstats)
exit <- read.csv("~/Downloads/exit.csv", stringsAsFactors = FALSE)
colnames(exit) <- 'obama'
str(exit)
exit$obama <- sample(exit$obama)
exit
devtools::use_data(exit)
devtools::use_data(exit, overwrite = TRUE)
library(introstats)
library(introstats)
?plot_normals
?plot_sampling_dist
detach("package:introstats", unload=TRUE)
?plot_sampling_dist
library(introstats)
?plot_normals
plot_sampling_dist <- function (pop,   n = 1e5, size = c(2, 5, 30)) {
dens <- matrix(ncol = length(size), nrow = n)
for (i in seq_along(size)) {
dens[, i] <- replicate(n, mean(sample(pop, size = size[i])))
}
colnames(dens) <- paste0("n_", size)
dens <- as.data.frame(dens)
dens <- tidyr::gather(dens, size, obs)
ggplot2::qplot(obs, data = dens, fill = size, color = size,
geom = "density", alpha = I(1/3), ...) +
ggplot2::ylab("Density") +
ggplot2::xlab("") +
ggplot2::theme_bw()
}
x
x <- runif(10000)
plot_sampling_dist(x)
install.packages("tidyr")
plot_sampling_dist(x)
?qplot
plot_sampling_dist <- function (pop,   n = 1e5, size = c(2, 5, 30)) {
dens <- matrix(ncol = length(size), nrow = n)
for (i in seq_along(size)) {
dens[, i] <- replicate(n, mean(sample(pop, size = size[i])))
}
colnames(dens) <- paste0("n_", size)
dens <- as.data.frame(dens)
dens <- tidyr::gather(dens, size, obs)
ggplot2::qplot(obs, ..., data = dens, fill = size, color = size,
geom = "density", alpha = I(1/3)) +
ggplot2::ylab("Density") +
ggplot2::xlab("") +
ggplot2::theme_bw()
}
plot_sampling_dist(x)
plot_sampling_dist <- function (pop,   n = 1e5, size = c(2, 5, 30), ...) {
dens <- matrix(ncol = length(size), nrow = n)
for (i in seq_along(size)) {
dens[, i] <- replicate(n, mean(sample(pop, size = size[i])))
}
colnames(dens) <- paste0("n_", size)
dens <- as.data.frame(dens)
dens <- tidyr::gather(dens, size, obs)
ggplot2::qplot(obs, ..., data = dens, fill = size, color = size,
geom = "density", alpha = I(1/3)) +
ggplot2::ylab("Density") +
ggplot2::xlab("") +
ggplot2::theme_bw()
}
plot_sampling_dist(x)
plot_sampling_dist(x, facets = size ~ .)
plot_sampling_dist <- function (pop,   n = 1e5, size = c(2, 5, 30), ...) {
dens <- matrix(ncol = length(size), nrow = n)
for (i in seq_along(size)) {
dens[, i] <- replicate(n, mean(sample(pop, size = size[i])))
}
colnames(dens) <- paste0("n_", size)
dens <- as.data.frame(dens)
dens <- tidyr::gather(dens, size, obs)
ggplot2::qplot(obs, ..., data = dens, fill = size, color = size,
geom = "density", alpha = I(1/3), scales = "free_y") +
ggplot2::ylab("Density") +
ggplot2::xlab("") +
ggplot2::theme_bw()
}
plot_sampling_dist(x, facets = size ~ .)
?qplot
?hasArg
plot_sampling_dist <- function (pop,   n = 1e5, size = c(2, 5, 30), facets = TRUE) {
dens <- matrix(ncol = length(size), nrow = n)
for (i in seq_along(size)) {
dens[, i] <- replicate(n, mean(sample(pop, size = size[i])))
}
colnames(dens) <- paste0("n_", size)
dens <- as.data.frame(dens)
dens <- tidyr::gather(dens, size, obs)
p <- ggplot2::qplot(obs, data = dens, fill = size, color = size,
geom = "density", alpha = I(1/3)) +
ggplot2::ylab("Density") +
ggplot2::xlab("") +
ggplot2::theme_bw()
if (facets) {
p + facet_grid(size ~ ., scales = "free_y")
} else {
p
}
}
x
hist(x)
plot_sampling_dist <- function (pop,   n = 1e5, size = c(2, 5, 30), facets = FALSE) {
dens <- matrix(ncol = length(size), nrow = n)
for (i in seq_along(size)) {
dens[, i] <- replicate(n, mean(sample(pop, size = size[i])))
}
colnames(dens) <- paste0("n_", size)
dens <- as.data.frame(dens)
dens <- tidyr::gather(dens, size, obs)
p <- ggplot2::qplot(obs, data = dens, fill = size, color = size,
geom = "density", alpha = I(1/3)) +
ggplot2::ylab("Density") +
ggplot2::xlab("") +
ggplot2::theme_bw()
if (facets) {
p + facet_grid(size ~ ., scales = "free_y")
} else {
p
}
}
plot_sampling_dist(x)
plot_sampling_dist(x, facets = TRUE)
plot_sampling_dist <- function (pop,   n = 1e5, size = c(2, 5, 30), facets = FALSE) {
dens <- matrix(ncol = length(size), nrow = n)
for (i in seq_along(size)) {
dens[, i] <- replicate(n, mean(sample(pop, size = size[i])))
}
colnames(dens) <- paste0("n_", size)
dens <- as.data.frame(dens)
dens <- tidyr::gather(dens, size, obs)
p <- ggplot2::qplot(obs, data = dens, fill = size, color = size,
geom = "density", alpha = I(1/3)) +
ggplot2::ylab("Density") +
ggplot2::xlab("") +
ggplot2::theme_bw()
if (facets) {
p + ggplot2::facet_grid(size ~ ., scales = "free_y")
} else {
p
}
}
plot_sampling_dist(x, facets = TRUE)
library(introstats)
?plot_sampling_dist
